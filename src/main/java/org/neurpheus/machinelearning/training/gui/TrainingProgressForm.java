/*
 * Neurpheus - Machine Learning Package
 *
 * Copyright (C) 2009, 2016 Jakub Strychowski
 *
 *  This library is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the Free
 *  Software Foundation; either version 3.0 of the License, or (at your option)
 *  any later version.
 *
 *  This library is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 *  for more details.
 */

package org.neurpheus.machinelearning.training.gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.neurpheus.machinelearning.training.Trainer;

/**
 *
 * @author  jstrychowski
 */
public class TrainingProgressForm extends javax.swing.JFrame implements ClipboardOwner {
    
    Trainer trainer;
    private int maximumNumberOfGraphValues;
    private List rmseValues;
    private List qualityValues;
    
    /** Creates new form TrainingProgressForm
     * @param trainer 
     */
    public TrainingProgressForm(Trainer trainer) {
        initComponents();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(100);
        this.trainer = trainer;
        jRMSEGraph.setForcedMaxX(trainer.getNumberOfIterations());
        jRMSEGraph.setForcedMinX(1);
        jRMSEGraph.setForcedMinY(0);
        jRMSEGraph.setForcedMaxY(0.1);
        jQualityGraph.setForcedMaxX(trainer.getNumberOfIterations());
        jQualityGraph.setForcedMinX(1);
        jQualityGraph.setForcedMinY(0);
        jQualityGraph.setForcedMaxY(100.0);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jRMSEGraph = new org.neurpheus.machinelearning.training.gui.GraphPanel();
        jValueDescription = new javax.swing.JLabel();
        jErrorValue = new javax.swing.JLabel();
        jCopyDataToClipboard = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jQualityGraph = new org.neurpheus.machinelearning.training.gui.GraphPanel();
        jQualityDescription = new javax.swing.JLabel();
        jQualityValue = new javax.swing.JLabel();
        jCopyQualityDataToClipboard1 = new javax.swing.JButton();

        setTitle("Training Process Progress");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Training Process Progress");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Break");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText(" ");

        jLabel2.setText("Iteration : ");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jRMSEGraph.setBackground(new java.awt.Color(255, 255, 255));
        jRMSEGraph.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jRMSEGraphLayout = new org.jdesktop.layout.GroupLayout(jRMSEGraph);
        jRMSEGraph.setLayout(jRMSEGraphLayout);
        jRMSEGraphLayout.setHorizontalGroup(
            jRMSEGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 444, Short.MAX_VALUE)
        );
        jRMSEGraphLayout.setVerticalGroup(
            jRMSEGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 181, Short.MAX_VALUE)
        );

        jValueDescription.setText("Root Mean Square Error:");

        jErrorValue.setText("---");

        jCopyDataToClipboard.setText("Copy data to clipboard");
        jCopyDataToClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyDataToClipboardActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(317, Short.MAX_VALUE)
                .add(jCopyDataToClipboard)
                .addContainerGap())
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jRMSEGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jValueDescription)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jErrorValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(256, 256, 256))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jValueDescription)
                    .add(jErrorValue))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRMSEGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCopyDataToClipboard)
                .addContainerGap())
        );

        jTabbedPane1.addTab("RMSE", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jQualityGraph.setBackground(new java.awt.Color(255, 255, 255));
        jQualityGraph.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        org.jdesktop.layout.GroupLayout jQualityGraphLayout = new org.jdesktop.layout.GroupLayout(jQualityGraph);
        jQualityGraph.setLayout(jQualityGraphLayout);
        jQualityGraphLayout.setHorizontalGroup(
            jQualityGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 444, Short.MAX_VALUE)
        );
        jQualityGraphLayout.setVerticalGroup(
            jQualityGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 181, Short.MAX_VALUE)
        );

        jQualityDescription.setText("Quality:");

        jQualityValue.setText("---");

        jCopyQualityDataToClipboard1.setText("Copy data to clipboard");
        jCopyQualityDataToClipboard1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyQualityDataToClipboard1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(317, Short.MAX_VALUE)
                .add(jCopyQualityDataToClipboard1)
                .addContainerGap())
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jQualityGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jQualityDescription)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jQualityValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(338, 338, 338))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jQualityDescription)
                    .add(jQualityValue))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jQualityGraph, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCopyQualityDataToClipboard1)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Quality", jPanel4);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        trainer.breakProcessing();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCopyDataToClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyDataToClipboardActionPerformed
        StringBuffer buffer = new StringBuffer();
        for (final Iterator it = rmseValues.iterator(); it.hasNext(); ) {
            Double v = (Double) it.next();
            buffer.append(v.doubleValue());
            buffer.append("\r\n");
        }
        
        String dataString = buffer.toString();
        StringSelection stringSelection = new StringSelection( dataString );
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents( stringSelection, this );        

    }//GEN-LAST:event_jCopyDataToClipboardActionPerformed

    private void jCopyQualityDataToClipboard1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyQualityDataToClipboard1ActionPerformed
        StringBuffer buffer = new StringBuffer();
        for (final Iterator it = qualityValues.iterator(); it.hasNext(); ) {
            Double v = (Double) it.next();
            buffer.append(v.doubleValue());
            buffer.append("\r\n");
        }
        
        String dataString = buffer.toString();
        StringSelection stringSelection = new StringSelection( dataString );
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents( stringSelection, this );        
}//GEN-LAST:event_jCopyQualityDataToClipboard1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrainingProgressForm(null).setVisible(true);
            }
        });
    }

    public void setProgress(int iteration, int numberOfIterations) {
        jProgressBar1.setValue(Math.round(100.0f * iteration / numberOfIterations));
        jLabel1.setText(iteration + " / " + numberOfIterations);
        if (rmseValues != null && rmseValues.size() > 0) {
            String lastError = rmseValues.get(rmseValues.size() - 1).toString();
            jErrorValue.setText(lastError);
        }
        if (qualityValues != null && qualityValues.size() > 0) {
            String lastQuality = qualityValues.get(qualityValues.size() - 1).toString();
            jQualityValue.setText(lastQuality);
        }
    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jCopyDataToClipboard;
    private javax.swing.JButton jCopyQualityDataToClipboard1;
    private javax.swing.JLabel jErrorValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel jQualityDescription;
    private org.neurpheus.machinelearning.training.gui.GraphPanel jQualityGraph;
    private javax.swing.JLabel jQualityValue;
    private org.neurpheus.machinelearning.training.gui.GraphPanel jRMSEGraph;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jValueDescription;
    // End of variables declaration//GEN-END:variables

    public int getMaximumNumberOfGraphValues() {
        return maximumNumberOfGraphValues;
    }

    public void setMaximumNumberOfGraphValues(int maximumNumberOfGraphValues) {
        this.maximumNumberOfGraphValues = maximumNumberOfGraphValues;
    }

    public List getRMSEValues() {
        return rmseValues;
    }

    public void setRMSEValues(List values) {
        this.rmseValues = values;
        List points = new ArrayList();
        int index = 1;
        double maxValue = 0.1;
        for (final Iterator it = values.iterator(); it.hasNext(); index++) {
            Double v = (Double) it.next();
            if (v.doubleValue() > maxValue) {
                maxValue = v.doubleValue();
            }
            points.add(new double[] {index, v.doubleValue()});
        }
        jRMSEGraph.setForcedMaxY(maxValue);
        jRMSEGraph.setPoints(points);
    }

    public List getQualityValues() {
        return qualityValues;
    }

    public void setQualityValues(List newValues) {
        this.qualityValues = newValues;
        List points = new ArrayList();
        int index = 1;
        for (final Iterator it = qualityValues.iterator(); it.hasNext(); index++) {
            Double v = (Double) it.next();
            points.add(new double[] {index, v.doubleValue()});
        }
        jQualityGraph.setForcedMaxY(100.0);
        jQualityGraph.setPoints(points);
    }
    
    public void lostOwnership(Clipboard clipboard, Transferable contents) {
        
    }
    
}
